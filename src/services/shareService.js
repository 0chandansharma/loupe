import { Share, Clipboard, Platform, Linking } from 'react-native';
import * as FileSystem from 'expo-file-system';
import * as Sharing from 'expo-sharing';
import * as Print from 'expo-print';
import Toast from 'react-native-toast-message';

export const shareService = {
  shareToWhatsApp: async (content) => {
    try {
      const whatsappUrl = `whatsapp://send?text=${encodeURIComponent(content)}`;
      const canOpen = await Linking.canOpenURL(whatsappUrl);
      
      if (canOpen) {
        await Linking.openURL(whatsappUrl);
      } else {
        Toast.show({
          type: 'error',
          text1: 'WhatsApp not installed',
          text2: 'Please install WhatsApp to share content',
        });
      }
    } catch (error) {
      console.error('Error sharing to WhatsApp:', error);
      Toast.show({
        type: 'error',
        text1: 'Sharing failed',
        text2: 'Could not share to WhatsApp',
      });
    }
  },
  
  shareViaEmail: async (content, subject) => {
    try {
      const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(content)}`;
      await Linking.openURL(mailtoUrl);
    } catch (error) {
      console.error('Error sharing via email:', error);
      Toast.show({
        type: 'error',
        text1: 'Email sharing failed',
        text2: 'Could not open email client',
      });
    }
  },
  
  copyToClipboard: async (content) => {
    try {
      await Clipboard.setString(content);
      Toast.show({
        type: 'success',
        text1: 'Copied to clipboard',
        text2: 'Summary text copied successfully',
      });
    } catch (error) {
      console.error('Error copying to clipboard:', error);
      Toast.show({
        type: 'error',
        text1: 'Copy failed',
        text2: 'Could not copy text to clipboard',
      });
    }
  },
  
  generateAndSharePDF: async (content, fileName = 'Summary') => {
    try {
      // Generate HTML content for PDF
      const htmlContent = `
        <html>
          <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
            <style>
              body {
                font-family: 'Helvetica';
                padding: 20px;
              }
              h1 {
                color: #FF7043;
                font-size: 24px;
              }
              .content {
                font-size: 16px;
                line-height: 1.6;
              }
              .footer {
                margin-top: 30px;
                font-size: 12px;
                color: #757575;
                text-align: center;
              }
            </style>
          </head>
          <body>
            <h1>Medical Report Summary</h1>
            <div class="content">${content.replace(/\n/g, '<br>')}</div>
            <div class="footer">Generated by DEECOGS App</div>
          </body>
        </html>
      `;
      
      // Create PDF file
      const { uri } = await Print.printToFileAsync({ html: htmlContent });
      
      // Get the PDF file name
      const pdfName = `${fileName}_${Date.now()}.pdf`;
      
      // Save to a more permanent location
      const pdfPath = FileSystem.documentDirectory + pdfName;
      await FileSystem.moveAsync({
        from: uri,
        to: pdfPath
      });
      
      // Share the PDF file
      if (Platform.OS === 'ios') {
        await Sharing.shareAsync(pdfPath);
      } else {
        await Sharing.shareAsync(pdfPath, {
          mimeType: 'application/pdf',
          dialogTitle: 'Share Medical Report Summary',
          UTI: 'com.adobe.pdf'
        });
      }
      
      return pdfPath;
    } catch (error) {
      console.error('Error generating/sharing PDF:', error);
      Toast.show({
        type: 'error',
        text1: 'PDF generation failed',
        text2: 'Could not create or share PDF',
      });
      throw error;
    }
  },
  
  shareGeneric: async (content, title) => {
    try {
      const result = await Share.share({
        message: content,
        title: title,
      });
      
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // Shared with activity type of result.activityType
          console.log('Shared with activity type:', result.activityType);
        } else {
          // Shared
          console.log('Shared successfully');
        }
      } else if (result.action === Share.dismissedAction) {
        // Dismissed
        console.log('Share dismissed');
      }
    } catch (error) {
      console.error('Error sharing:', error);
      Toast.show({
        type: 'error',
        text1: 'Sharing failed',
        text2: 'Could not share content',
      });
    }
  }
};